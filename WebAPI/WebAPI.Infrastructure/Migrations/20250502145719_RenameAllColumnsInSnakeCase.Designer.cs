// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Infrastructure.Database;

#nullable disable

namespace WebAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250502145719_RenameAllColumnsInSnakeCase")]
    partial class RenameAllColumnsInSnakeCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoomTypeAmenities", b =>
                {
                    b.Property<int>("id_amenity")
                        .HasColumnType("int");

                    b.Property<int>("id_room_type")
                        .HasColumnType("int");

                    b.HasKey("id_amenity", "id_room_type");

                    b.HasIndex("id_room_type");

                    b.ToTable("RoomTypeAmenities");
                });

            modelBuilder.Entity("RoomTypeServices", b =>
                {
                    b.Property<int>("id_room_type")
                        .HasColumnType("int");

                    b.Property<int>("id_service")
                        .HasColumnType("int");

                    b.HasKey("id_room_type", "id_service");

                    b.HasIndex("id_service");

                    b.ToTable("RoomTypeServices");
                });

            modelBuilder.Entity("WebAPI.Domain.Models.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Amenity", (string)null);
                });

            modelBuilder.Entity("WebAPI.Domain.Models.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Property", (string)null);
                });

            modelBuilder.Entity("WebAPI.Domain.Models.Entities.RoomService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("RoomService", (string)null);
                });

            modelBuilder.Entity("WebAPI.Domain.Models.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("AvailableRoomsCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("available_rooms_count");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("currency");

                    b.Property<decimal>("DailyPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("daily_price")
                        .HasAnnotation("MinValue", 0);

                    b.Property<byte>("MaxPersonCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("max_person_count")
                        .HasAnnotation("MinValue", 1);

                    b.Property<byte>("MinPersonCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("min_person_count")
                        .HasAnnotation("MinValue", 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("id_property");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("RoomType", (string)null);
                });

            modelBuilder.Entity("RoomTypeAmenities", b =>
                {
                    b.HasOne("WebAPI.Domain.Models.Entities.Amenity", null)
                        .WithMany()
                        .HasForeignKey("id_amenity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Domain.Models.Entities.RoomType", null)
                        .WithMany()
                        .HasForeignKey("id_room_type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomTypeServices", b =>
                {
                    b.HasOne("WebAPI.Domain.Models.Entities.RoomType", null)
                        .WithMany()
                        .HasForeignKey("id_room_type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Domain.Models.Entities.RoomService", null)
                        .WithMany()
                        .HasForeignKey("id_service")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Domain.Models.Entities.RoomType", b =>
                {
                    b.HasOne("WebAPI.Domain.Models.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
